package io.realization.internal.utils;

import android.app.AppOpsManager;
import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.Build;
import android.support.annotation.RequiresApi;
import android.util.Log;

import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;

public class DefaultUtils {
    @RequiresApi(api = Build.VERSION_CODES.M)
    public static void allowAllPermissions(Context context)
    {
        try
        {
            PackageInfo pi = context.getPackageManager().getPackageInfo(context.getPackageName(), PackageManager.GET_PERMISSIONS);
            for (String permissionName : pi.requestedPermissions)
            {
                try
                {
                    String opstr = AppOpsManager.permissionToOp(permissionName);
                    //int opcode = (int) AppOpsManager.class.getDeclaredMethod("strOpToOp", String.class).invoke(null, opstr);
                    runShell("appops set --uid " + context.getPackageName() + " " + opstr + " allow", true);
                }
                catch (Throwable th)
                {
                    th.printStackTrace();
                }
            }
        }
        catch (Throwable th)
        {

        }
    }

    public static boolean isRoot()
    {
        try
        {
            Process process = Runtime.getRuntime().exec("su");
            OutputStream os = process.getOutputStream();
            os.write("\n".getBytes());
            os.flush();
            os.write("exit".getBytes());
            os.flush();
            os.write("\n".getBytes());
            os.flush();
            int exitValue = process.waitFor();
            os.close();
            return exitValue == 0;
        }
        catch (Exception e)
        {
            return false;
        }
    }

    //Result is have "Error"
    public static byte[] runShell(String command, boolean isRoot)
    {
        try
        {
            Process process = Runtime.getRuntime().exec(isRoot ? "su" : "sh");
            InputStream ins = process.getInputStream();
            InputStream es = process.getErrorStream();
            OutputStream ous = process.getOutputStream();
            ous.write("\n".getBytes());
            ous.flush();
            ous.write(command.getBytes());
            ous.flush();
            ous.write("\n".getBytes());
            ous.flush();
            ous.write("exit".getBytes());
            ous.flush();
            ous.write("\n".getBytes());
            ous.flush();
            byte[] result = readInputStream(ins, false);
            byte[] error = readInputStream(es, false);
            process.waitFor();
            ins.close();
            es.close();
            ous.close();
            if (new String(error).trim().isEmpty())
            {
                return result;
            }
            else
            {
                return ("Shell Result : \n" + new String(result) + "\n" + "Shell Error : \n" + new String(error) + "\n").getBytes();
            }
        }
        catch (Throwable th)
        {
            return ("Application Error : \n" + Log.getStackTraceString(th)).getBytes();
        }
    }


    public static byte[] readInputStream(InputStream ins, boolean close)
    {
        try
        {
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            int i = -1;
            byte[] buf = new byte[1024];
            while ((i = ins.read(buf)) != -1)
            {
                bos.write(buf, 0, i);
            }
            if (close)
            {
                ins.close();
                bos.close();
            }
            return bos.toByteArray();
        }
        catch (Throwable th)
        {
            return Log.getStackTraceString(th).getBytes();
        }
    }


}
